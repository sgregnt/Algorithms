# Given a string s, find the longest
# palindromic substring in s. You may
# assume that the maximum length of s is 1000.

# babad -> aba
# cbbd -> bb

# ==========================================
# Brute force
# ==========================================

# check all substring and, check if those strings
# are polyndromes, if yes check if the length is larger
# than the length of the longest string so far.

# all combinations of strings
from itertools import combinations

string = "ab"
n = len(string)
pairs = list(combinations(range(n + 1), 2))

def check_pal(string):
    m = len(string)
    if m & 1 == 0:
        part1 = string[0 : m // 2 :]
        part2 = string[m // 2 :]
        if part1 != part2[::-1]:
            return -1
        else:
            return m
    else:
        q = m - 1
        part1 = string[0: q // 2:]
        part2 = string[q // 2 + 1:]
        if part1 != part2[::-1]:
            return -1
        else:
            return m
max_len = -1
for pair in pairs:
    max_len = max([max_len, check_pal(string[pair[0]:pair[1]])])

print(max_len)

# ==========================================
# right side and left side
# ==========================================

# dynamic programming
# initialize table with smalelst polyndrom

string = "ccccabbac"
n = len(string)
dp = [[-1] * n for _ in range(n)]

max_len = 0

for i in range(n):
    dp[i][i] = 1
    max_len = 1

for r in range(n): # right side
    for l in reversed(range(0, r)): # left side
        if string[l] == string[r]:

            if  l == r - 1:
                dp[l][r] = 2

            if dp[l + 1][r - 1] != -1:
                dp[l][r] = dp[l + 1][r - 1] + 2

            if dp[l][r] > max_len:
               max_len = dp[l][r]

print(max_len)

# ==========================================
#  left side and width
# ==========================================

string = "ccccabbac"
n = len(string)
dp = [[-1] * n for _ in range(n)]

max_len = 0

for c in range(n):
    dp[c][c] = 1
    max_len = 1

for w in range(1, n):               # with  1, to, n-1
    for l in range(n - w):          # left 0, to n - w - 1
        if string[l] == string[l + w]:
            if w == 1:
                dp[l][l + w] = 2
            else:
                if dp[l + 1][l + w - 1] != -1:
                    dp[l][l + w] = dp[l + 1][l + w - 1] + 2

            if dp[l][l + w] > max_len:
               max_len = dp[l][l + w]

print(max_len)


# ==========================================
#  expend
# ==========================================

string = "ccccabbac"
n = len(string)
dp = [[-1] * n for _ in range(n)]

max_len = 0

for c in range(n):
    dp[c][c] = 1
    max_len = 1

for w in range(1, n):               # with  1, to, n-1
    for l in range(n - w):          # left 0, to n - w - 1
        if string[l] == string[l + w]:
            if w == 1:
                dp[l][l + w] = 2
            else:
                if dp[l + 1][l + w - 1] != -1:
                    dp[l][l + w] = dp[l + 1][l + w - 1] + 2

            if dp[l][l + w] > max_len:
               max_len = dp[l][l + w]

print(max_len)


# ------------------------------------
#  another implementation from a different filed copied here
# ------------------------------------

class Solution(object):
    def longestPalindrome(self, s):

        n = len(s)
        dp =  [ [0] * n for _ in range(len(s))]

        for i in range(n):
            dp[i][i] = 1

        max_str = s[0]
        max_val = 1

        for i in range(1, n):
            for j in range(i):
                if s[j] == s[i]:
                    if  (i - j) > 2:
                        if dp[i-1][j+1] > 0:
                            dp[i][j] = dp[i-1][j+1] + 2
                    else:
                        dp[i][j] = i - j + 1

                if max_val < dp[i][j]:
                    max_val = dp[i][j]
                    max_str = s[j: i+1]

        return max_str


a = Solution()
print(a.longestPalindrome("cbbd"))